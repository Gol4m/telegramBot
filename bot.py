from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import asyncio

from Constants import TOKEN  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ TOKEN –æ–ø—Ä–µ–¥–µ–ª—ë–Ω

ASK_DATE = 1
original_titles = {}
scheduler = AsyncIOScheduler()


# –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
def get_day_word(n: int) -> str:
    if 11 <= n % 100 <= 14:
        return "–¥–Ω–µ–π"
    elif n % 10 == 1:
        return "–¥–µ–Ω—å"
    elif 2 <= n % 10 <= 4:
        return "–¥–Ω—è"
    else:
        return "–¥–Ω–µ–π"


# /count ‚Äî –∑–∞–ø—É—Å–∫ –æ—Ç—Å—á—ë—Ç–∞
async def count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_chat.type in ['group', 'supergroup']:
        chat = update.effective_chat
        original_titles[chat.id] = chat.title
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30.04.2025):")
        return ASK_DATE
    else:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
async def process_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    date_str = update.message.text

    try:
        target_date = datetime.strptime(date_str, "%d.%m.%Y").date()
        today = datetime.today().date()
        delta_days = (target_date - today).days

        if delta_days < 0:
            await update.message.reply_text("–î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return ASK_DATE

        await update.message.reply_text(f"üìÖ –û—Ç—Å—á—ë—Ç –¥–æ {date_str} –∑–∞–ø—É—â–µ–Ω!")

        original_title = original_titles.get(chat_id)

        # –ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
        async def update_title():
            nonlocal delta_days
            if delta_days <= 0:
                final_title = f"{original_title} ‚Äî –°–µ–≥–æ–¥–Ω—è!"
                await context.bot.set_chat_title(chat_id=chat_id, title=final_title)
                await asyncio.sleep(5)
                await context.bot.set_chat_title(chat_id=chat_id, title=original_title)
                scheduler.remove_job(str(chat_id))
                return

            word = get_day_word(delta_days)
            new_title = f"{original_title} ‚Äî –û—Å—Ç–∞–ª–æ—Å—å {delta_days} {word}"
            try:
                await context.bot.set_chat_title(chat_id=chat_id, title=new_title)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
            delta_days -= 1

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        scheduler.add_job(update_title, "cron", hour=9, minute=0, id=str(chat_id), replace_existing=True)

        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì).")
        return ASK_DATE


# /stopcount ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
async def stop_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    job_id = str(chat_id)
    job = scheduler.get_job(job_id)

    if job:
        job.remove()
        original_title = original_titles.get(chat_id)
        if original_title:
            try:
                await context.bot.set_chat_title(chat_id=chat_id, title=original_title)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚õîÔ∏è –û—Ç—Å—á—ë—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞ –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã.")


# /cancel ‚Äî –æ—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –í–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def post_init(app):
    scheduler.start()


# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("count", count)],
    states={
        ASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_date)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)
app.add_handler(CommandHandler("stopcount", stop_count))

app.run_polling()
